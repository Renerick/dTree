{"version":3,"sources":["dTree.min.js","dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","treeData","opts","DEBUG_LEVEL","debug","root","siblings","parents","allNodes","_flatten","concat","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","zoom","d3","scaleExtent","on","svg","attr","event","transform","translate","select","append","call","tree","nodeHeightSeperation","inverseTree","separation","a","b","data","_update","rootNodes","parentNodes","zip","children","forEach","j","parent","links","selectAll","enter","l","noParent","styles","linage","_elbow","nodes","descendants","_linkSiblings","marriage","bind","_siblingLine","d","x","cWidth","y","cHeight","id","html","nodeRenderer","name","extra","textClass","nodeClick","preventDefault","nodeRightClick","recurse","node","push","ny","source","linedata","fun","line","curve","curveStepAfter","start","v","end","marriageId","marriageNode","find","nodeHeight","number","nodeMaxHeight","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","setAttribute","style","visibility","maxWidth","text","innerHTML","offsetHeight","removeChild","Math","max","nodeClass","msg","console","log","VERSION","init","options","arguments","undefined","defaultsDeep","_nodeHeightSeperation","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","isParent","class","depthOffset","pushNode","_sortPersons","child","p1","p2","m","p1result","p2result","_sortMarriages","marriages","index","sp","spouse","clone","hierarchy","persons","sort","Array","isArray","marriageA","marriageB"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAjiB,SAAWkB,EAAQC,GACC,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACnDD,EAAOM,MAAQL,KACfM,KAAO,WAAc,YDKrB,ICHIC,GAAW,WAEJ,QAFPA,GAEQC,EAAUC,GDGlB9B,gBAAgB2B,KCLhBC,GAGFA,EAAYG,YAAcD,EAAKE,MAAQ,EAAI,EAE3CL,KAAKM,KAAOJ,EAASI,KACrBN,KAAKO,SAAWL,EAASK,SACzBP,KAAKQ,QAAUN,EAASM,QACxBR,KAAKG,KAAOA,EAGZH,KAAKS,SAAWT,KAAKU,SAASV,KAAKM,MACnCN,KAAKS,SAAWT,KAAKS,SAASE,OAAOX,KAAKU,SAASV,KAAKQ,SAGxD,IAAII,GAAeC,EAAEC,OAAOd,KAAKS,SAAU,SAASM,GAClD,OAAQA,EAAEC,QAEZhB,MAAKiB,SAAWd,EAAKe,UAAUD,SAASL,EACtCT,EAAKgB,UAAWhB,EAAKe,UAAUE,cDsSjC,MAhSA3C,cCzBEwB,ID0BAZ,IAAK,SACLgC,MCLE,WAEJ,GAAIlB,GAAOH,KAAKG,KAEZc,GADWjB,KAAKS,SACLT,KAAKiB,UAEhBK,EAAQnB,EAAKmB,MAAQnB,EAAKoB,OAAOC,KAAOrB,EAAKoB,OAAOE,MACpDC,EAASvB,EAAKuB,OAASvB,EAAKoB,OAAOI,IAAMxB,EAAKoB,OAAOK,OAErDC,EAAOC,GAAGD,OACXE,aAAa,GAAK,KAClBC,GAAG,OAAQ,WACVC,EAAIC,KAAK,YAAaJ,GAAGK,MAAMC,UAAUC,UAAUf,EAAQ,EAAGnB,EAAKoB,OAAOI,QAI1EM,EAAMjC,KAAKiC,IAAMH,GAAGQ,OAAOnC,EAAKxB,QACjC4D,OAAO,OACPL,KAAK,QAASZ,GACdY,KAAK,SAAUR,GACfc,KAAKX,GACLU,OAAO,KACPL,KAAK,YAAa,aAAeZ,EAAQ,EAAI,IAAMnB,EAAKoB,OAAOI,IAAM,IAGxE3B,MAAKyC,KAAOX,GAAGW,OACZxB,UAAwB,EAAdA,EAAS,GACTd,EAAKe,UAAUwB,qBAAqBzB,EAAS,GAAIA,EAAS,MAEvEjB,KAAK2C,YAAcb,GAAGW,OACnBxB,UAAwB,EAAdA,EAAS,GACVd,EAAKe,UAAUwB,qBAAqBzB,EAAS,GAAIA,EAAS,SAEtEjB,KAAKyC,KAAKG,WAAW,SAAoBC,EAAGC,GAC1C,MAAID,GAAEE,KAAK/B,QAAU8B,EAAEC,KAAK/B,OACnB,GAEA,KAIXhB,KAAK2C,YAAYC,WAAW,SAAoBC,EAAGC,GACjD,MAAID,GAAEE,KAAK/B,QAAU8B,EAAEC,KAAK/B,OACnB,GAEA,KAIXhB,KAAKgD,aDJH3D,IAAK,UACLgC,MCOG,WAEL,GAAIlB,GAAOH,KAAKG,KAEZc,GADWjB,KAAKS,SACLT,KAAKiB,UAEhBgC,EAAYjD,KAAKyC,KAAKzC,KAAKM,MAC3B4C,EAAclD,KAAK2C,YAAY3C,KAAKQ,QAExCK,GAAEsC,IAAIF,EAAUG,SAAUF,EAAYE,UAAUC,QAAQ,SAASxE,GAC1DA,EAAE,GAAGuE,WAEVvE,EAAE,GAAGuE,SAAWvE,EAAE,GAAGuE,SAAWvE,EAAE,GAAGuE,SAASzC,OAAO9B,EAAE,GAAGuE,UAAYvE,EAAE,GAAGuE,SAEvEvE,EAAE,GAAGuE,UACPvE,EAAE,GAAGuE,SAASC,QAAQ,SAAUC,GAC9BA,EAAEC,OAAS1E,EAAE,OAKnB,IAAI2E,GAAQP,EAAUO,OAGtBxD,MAAKiC,IAAIwB,UAAU,SAChBV,KAAKS,GACLE,QAEA5C,OAAO,SAAS6C,GACf,OAAQA,EAAEhF,OAAOoE,KAAKa,WAEvBrB,OAAO,QACPL,KAAK,QAAS/B,EAAK0D,OAAOC,QAC1B5B,KAAK,IAAKlC,KAAK+D,OAElB,IAAIC,GAAQhE,KAAKiC,IAAIwB,UAAU,SAC5BV,KAAKE,EAAUgB,eACfP,OAEH1D,MAAKkE,gBAGLlE,KAAKiC,IAAIwB,UAAU,YAChBV,KAAK/C,KAAKO,UACVmD,QACAnB,OAAO,QACPL,KAAK,QAAS/B,EAAK0D,OAAOM,UAC1BjC,KAAK,IAAKrB,EAAEuD,KAAKpE,KAAKqE,aAAcrE,OAGvCgE,EAAMzB,OAAO,iBACVzB,OAAO,SAASwD,GACf,OAAOA,EAAEvB,KAAK/B,SAEfkB,KAAK,IAAK,SAASoC,GAClB,MAAOA,GAAEC,EAAID,EAAEE,OAAS,EAAI,OAE7BtC,KAAK,IAAK,SAASoC,GAClB,MAAOA,GAAEG,EAAIH,EAAEI,QAAU,EAAI,OAE9BxC,KAAK,QAAS,SAASoC,GACtB,MAAOA,GAAEE,OAAS,OAEnBtC,KAAK,SAAU,SAASoC,GACvB,MAAOA,GAAEI,QAAU,OAEpBxC,KAAK,KAAM,SAASoC,GACnB,MAAOA,GAAEK,KAEVC,KAAK,SAASN,GACb,MAAOnE,GAAKe,UAAU2D,aACpBP,EAAEvB,KAAK+B,KACPR,EAAEC,EACFD,EAAEG,EACFxD,EAAS,GACTA,EAAS,GACTqD,EAAEvB,KAAKgC,MACPT,EAAEvB,KAAK4B,GACPL,EAAEvB,KAAI,SACNuB,EAAEvB,KAAKiC,UACP7E,EAAKe,UAAUE,gBAElBY,GAAG,QAAS,SAASsC,GAChBA,EAAEvB,KAAK/B,QAGXb,EAAKe,UAAU+D,UAAUX,EAAEvB,KAAK+B,KAAMR,EAAEvB,KAAKgC,MAAOT,EAAEvB,KAAK4B,MAE5D3C,GAAG,cAAe,SAASsC,GACtBA,EAAEvB,KAAK/B,SAGXc,GAAGK,MAAM+C,iBACT/E,EAAKe,UAAUiE,eAAeb,EAAEvB,KAAK+B,KAAMR,EAAEvB,KAAKgC,MAAOT,EAAEvB,KAAK4B,UDlClEtF,IAAK,WACLgC,MCqCI,SAACf,GAIP,QAAS8E,GAAQC,GACXA,EAAKjC,UACPiC,EAAKjC,SAASC,QAAQ+B,GAEnBC,EAAKV,KACRU,EAAKV,KAAO9F,GAEdkC,EAAEuE,KAAKD,GAVT,GAAItE,MACAlC,EAAI,CAYR,OADAuG,GAAQ9E,GACDS,KDlCL1B,IAAK,SACLgC,MCoCE,SAACiD,EAAGzF,GACR,GAAIyF,EAAE3F,OAAOoE,KAAKa,SAChB,MAAO,UAET,IAAI2B,GAAKjB,EAAE3F,OAAO8F,EAAgC,IAA3BH,EAAEkB,OAAOf,EAAIH,EAAE3F,OAAO8F,GAEzCgB,IACFlB,EAAGD,EAAE3F,OAAO4F,EACZE,EAAGH,EAAE3F,OAAO8F,IAEZF,EAAGD,EAAE3F,OAAO4F,EACZE,EAAGc,IAEHhB,EAAGD,EAAEkB,OAAOjB,EACZE,EAAGH,EAAEkB,OAAOf,IAGViB,EAAM5D,GAAG6D,OAAOC,MAAM9D,GAAG+D,gBAC1BtB,EAAE,SAASD,GACV,MAAOA,GAAEC,IAEVE,EAAE,SAASH,GACV,MAAOA,GAAEG,GAEb,OAAOiB,GAAID,MDnCTpG,IAAK,gBACLgC,MCqCS,WAEX,GAAIZ,GAAWT,KAAKS,QAEpBI,GAAEwC,QAAQrD,KAAKO,SAAU,SAAS+D,GAChC,GAAIwB,GAAQrF,EAASK,OAAO,SAASiF,GACnC,MAAOzB,GAAEkB,OAAOb,IAAMoB,EAAEhD,KAAK4B,KAE3BqB,EAAMvF,EAASK,OAAO,SAASiF,GACjC,MAAOzB,GAAE3F,OAAOgG,IAAMoB,EAAEhD,KAAK4B,IAE/BL,GAAEkB,OAAOjB,EAAIuB,EAAM,GAAGvB,EACtBD,EAAEkB,OAAOf,EAAIqB,EAAM,GAAGrB,EACtBH,EAAE3F,OAAO4F,EAAIyB,EAAI,GAAGzB,EACpBD,EAAE3F,OAAO8F,EAAIuB,EAAI,GAAGvB,CAEpB,IAAIwB,GAA4C,MAA9BH,EAAM,GAAG/C,KAAKmD,aACdJ,EAAM,GAAG/C,KAAKmD,aAAavB,GAC3BqB,EAAI,GAAGjD,KAAKmD,aAAavB,GACvCuB,EAAezF,EAAS0F,KAAK,SAASpF,GACxC,MAAOA,GAAEgC,KAAK4B,IAAMsB,GAEtB3B,GAAEkB,OAAOU,aAAeA,EACxB5B,EAAE3F,OAAOuH,aAAeA,ODnCxB7G,IAAK,eACLgC,MCuCQ,SAACiD,EAAGzF,GAEd,GAAI0G,GAAKjB,EAAE3F,OAAO8F,EAAgC,IAA3BH,EAAEkB,OAAOf,EAAIH,EAAE3F,OAAO8F,GACzCtD,EAAYnB,KAAKiB,SAAS,GAC1BmF,EAAapG,KAAKiB,SAAS,EAG3BqD,GAAE+B,OAAS,IACbd,GAAmB,EAAba,EAAiB,GAGzB,IAAIX,KACFlB,EAAGD,EAAEkB,OAAOjB,EACZE,EAAGH,EAAEkB,OAAOf,IAEZF,EAAGD,EAAEkB,OAAOjB,EAAgB,EAAZpD,EAAgB,GAChCsD,EAAGH,EAAEkB,OAAOf,IAEZF,EAAGD,EAAEkB,OAAOjB,EAAgB,EAAZpD,EAAgB,GAChCsD,EAAGc,IAEHhB,EAAGD,EAAE3F,OAAOuH,aAAa3B,EACzBE,EAAGc,IAEHhB,EAAGD,EAAE3F,OAAOuH,aAAa3B,EACzBE,EAAGH,EAAE3F,OAAO8F,IAEZF,EAAGD,EAAE3F,OAAO4F,EACZE,EAAGH,EAAE3F,OAAO8F,IAGViB,EAAM5D,GAAG6D,OAAOC,MAAM9D,GAAG+D,gBAC1BtB,EAAE,SAASD,GACV,MAAOA,GAAEC,IAEVE,EAAE,SAASH,GACV,MAAOA,GAAEG,GAEb,OAAOiB,GAAID,QDtCTpG,IAAK,wBACLgC,MCwCwB,SAACF,EAAWmF,GACtC,MAAOA,GAAgB,MDrCrBjH,IAAK,YACLgC,MCuCY,SAAC2C,EAAO1C,EAAOF,GAC7B,GACImF,GAAY,EACZC,EAASC,SAASC,cAAc,MA0BpC,OAzBAD,UAASE,KAAKC,YAAYJ,GAE1B3F,EAAEgG,IAAI7C,EAAO,SAASjD,GACpB,GAAI+F,GAAYL,SAASC,cAAc,MACvCI,GAAUC,aAAa,QAAShG,EAAEgC,KAAI,UACtC+D,EAAUE,MAAMC,WAAa,SAC7BH,EAAUE,MAAME,SAAW5F,EAAQ,IAEnC,IAAI6F,GAAO/F,EAAaL,EAAEgC,KAAK+B,KAAM/D,EAAEgC,KAAKgC,MAAOhE,EAAEgC,KAAKiC,UAC1D8B,GAAUM,UAAYD,EAEtBX,EAAOI,YAAYE,EACnB,IAAIpF,GAASoF,EAAUO,YACvBb,GAAOc,YAAYR,GAEnBP,EAAYgB,KAAKC,IAAIjB,EAAW7E,GAChCX,EAAE2D,QAAUhD,EACRX,EAAEgC,KAAK/B,OACTD,EAAEyD,OAAS,EAEXzD,EAAEyD,OAASlD,IAGfmF,SAASE,KAAKW,YAAYd,IAElBlF,EAAOiF,MDpCblH,IAAK,gBACLgC,MCsCgB,SAACyD,EAAMP,EAAGE,EAAG/C,EAAQJ,EAAOyD,EAAOJ,EAAI8C,EAAWzC,EAAW5D,GAC/E,GAAIiE,GAAO,EAOX,OANAA,IAAQ,QACRA,GAAQ,mCACRA,GAAQ,UAAYoC,EAAY,KAChCpC,GAAQ,WAAaV,EAAK,OAC1BU,GAAQjE,EAAa0D,EAAMC,EAAOC,GAClCK,GAAQ,YDlCNhG,IAAK,gBACLgC,MCqCgB,SAACyD,EAAMC,EAAOC,GAChC,GAAIK,GAAO,EAMX,OALAA,IAAQ,MACRA,GAAQ,kBACRA,GAAQ,UAAYL,EAAY,OAChCK,GAAQP,EACRO,GAAQ,YDjCNhG,IAAK,SACLgC,MCoCS,SAACqG,GACRzH,EAAYG,YAAc,GAC5BuH,QAAQC,IAAIF,OAxVZzH,KA8VAF,GAEJ8H,QAAS,QAETC,KAAM,SAAS/E,GDjCX,GCiCiBgF,GAAOC,UAAAlJ,QAAA,GAAAmJ,SAAAD,UAAA,MAAKA,UAAA,GAE3B7H,EAAOU,EAAEqH,aAAaH,OACxBpJ,OAAQ,SACR0B,OAAO,EACPiB,MAAO,IACPI,OAAQ,IACRR,WACE+D,UAAW,SAASH,EAAMC,EAAOJ,KACjCQ,eAAgB,SAASL,EAAMC,EAAOJ,KACtCjC,qBAAsB,SAASvB,EAAWmF,GACxC,MAAOrG,GAAYkI,sBAAsBhH,EAAWmF,IAEtDzB,aAAc,SAASC,EAAMP,EAAGE,EAAG/C,EAAQJ,EAAOyD,EAAOJ,EAAI8C,EAAWzC,EAAW5D,GACjF,MAAOnB,GAAYmI,cAActD,EAAMP,EAAGE,EAAG/C,EAAQJ,EAAOyD,EAC1DJ,EAAG8C,EAAWzC,EAAW5D,IAE7BH,SAAU,SAAS+C,EAAO1C,EAAOF,GAC/B,MAAOnB,GAAYoI,UAAUrE,EAAO1C,EAAOF,IAE7CkH,WAAY,SAASC,EAAOC,EAAQC,EAAOC,GAAS,MAAO,IAC3DtH,aAAc,SAAS0D,EAAMC,EAAOC,GAClC,MAAO/E,GAAY0I,cAAc7D,EAAMC,EAAOC,KAGlDzD,QACEI,IAAK,EACLF,MAAO,EACPG,OAAQ,EACRJ,KAAM,GAERL,UAAW,IACX0C,QACEwB,KAAM,OACNvB,OAAQ,SACRK,SAAU,WACVgD,KAAM,cAINpE,EAAO/C,KAAK4I,YAAY7F,EAAM5C,GAC9B0I,EAAc,GAAI5I,GAAY8C,EAAM5C,EACxC0I,GAAYC,UAIdF,YAAa,SAAS7F,EAAM5C,GAE1B,GAAII,MACAoE,EAAK,EAELrE,GACFwE,KAAM,GACNH,GAAIA,IACJ3D,QAAQ,EACRoC,aAGE2F,EAAkB,QAAlBA,GAA2BC,EAAQzF,GAGrC,GAAI8B,IACFP,KAAMkE,EAAOlE,KACbH,GAAIA,IACJ3D,QAAQ,EACRoC,YACA5C,WACAuE,MAAOiE,EAAOjE,MACdkE,WAAYD,EAAOC,SACnBjE,UAAWgE,EAAOhE,UAAYgE,EAAOhE,UAAY7E,EAAK0D,OAAOsD,KAC7D+B,QAAOF,EAAM,SAASA,EAAM,SAAS7I,EAAK0D,OAAOwB,KAI/C9B,IAAUjD,IACZ+E,EAAKzB,UAAW,EAIlB,KAAK,GAAI/E,GAAI,EAAGA,EAAImK,EAAOG,YAAatK,IAAK,CAC3C,GAAIuK,IACFtE,KAAM,GACNH,GAAIA,IACJ3D,QAAQ,EACRoC,YACAQ,SAAUyB,EAAKzB,SACfqF,SAAU5D,EAAK4D,SAEjB1F,GAAOH,SAASkC,KAAK8D,GACrB7F,EAAS6F,EAWX,GAPArJ,EAAMsJ,aAAaL,EAAO5F,SAAUjD,GAGpCU,EAAEwC,QAAQ2F,EAAO5F,SAAU,SAASkG,GAClCP,EAAgBO,EAAOjE,KAGrB2D,EAAOxI,QAAQ,CAGjB,GAAI+I,GAAKP,EAAOxI,QAAQ,EACpB+I,KACFA,EAAGN,UAAW,EAEhB,IAAIO,GAAKR,EAAOxI,QAAQ,EACpBgJ,KACFA,EAAGP,UAAW,EAEhB,IAAIQ,IACF3E,KAAM,GACNH,GAAIA,IACJ3D,QAAQ,EACR4C,UAAU,EACVqF,UAAU,EACV7F,YACA5C,WACAuE,MAAO,KAGT,IAAIwE,EACF,GAAIG,GAAWX,EAAgBQ,EAAIlE,EAOrC,IAJIkE,GAAMC,GACRnE,EAAK7E,QAAQ8E,KAAKmE,GAGhBD,EAAG,CACL,GAAIG,GAAWZ,EAAgBS,EAAInE,EACnCsE,GAASzD,aAAeuD,EAGtBF,GAAMC,IAERE,EAAS9F,UAAW,EACpB+F,EAAS/F,UAAW,EACpBrD,EAAS+E,MACPE,QACEb,GAAI+E,EAAS/E,IAEfhG,QACEgG,GAAIgF,EAAShF,IAEf0B,OAAQ,KAoDd,MA/CKhB,GAAK4D,SAGR1F,EAAO/C,QAAQ8E,KAAKD,GAFpB9B,EAAOH,SAASkC,KAAKD,GAKvBtF,EAAM6J,eAAeZ,EAAOa,UAAW1J,GAGvCU,EAAEwC,QAAQ2F,EAAOa,UAAW,SAAS1F,EAAU2F,GAE7C,GAAIL,IACF3E,KAAM,GACNH,GAAIA,IACJ3D,QAAQ,EACR4C,UAAU,EACVR,YACA2B,MAAOZ,EAASY,MAGlBxB,GAAOH,SAASkC,KAAKmE,EAErB,IAAIM,GAAK5F,EAAS6F,OACdA,EAASjB,EAAgBgB,EAAIxG,EACjCyG,GAAO9D,aAAeuD,EACtBO,EAAOpG,UAAW,EAElB7D,EAAMsJ,aAAalF,EAASf,SAAUjD,GACtCU,EAAEwC,QAAQc,EAASf,SAAU,SAASkG,GACpCP,EAAgBO,EAAOG,KAGzBlJ,EAAS+E,MACPE,QACEb,GAAIU,EAAKV,IAEXhG,QACEgG,GAAIqF,EAAOrF,IAEb0B,OAAQyD,MAIRvG,GAAUjD,IACZiD,EAAO/C,QAAUK,EAAEoJ,MAAM1G,EAAOH,WAG3BiC,EAOT,OAJAxE,GAAEwC,QAAQN,EAAM,SAASiG,GACvBD,EAAgBC,EAAQ1I,MAIxBA,KAAMwB,GAAGoI,UAAU5J,EAAM,SAASgE,GAAK,MAAOA,GAAElB,WAChD5C,QAASsB,GAAGoI,UAAU5J,EAAM,SAASgE,GAAK,MAAOA,GAAE9D,UACnDD,SAAUA,IAKd8I,aAAc,SAASc,EAAShK,GAM9B,MALe8H,SAAXkC,GACFA,EAAQC,KAAK,SAASvH,EAAGC,GACvB,MAAO3C,GAAKe,UAAUoH,WAAWzF,EAAEiC,KAAMjC,EAAEkC,MAAOjC,EAAEgC,KAAMhC,EAAEiC,SAGzDoF,GAGTP,eAAgB,SAASC,EAAW1J,GAQlC,MAPiB8H,SAAb4B,GAA0BQ,MAAMC,QAAQT,IAC1CA,EAAUO,KAAK,SAASG,EAAWC,GACjC,GAAI3H,GAAI0H,EAAUP,OACdlH,EAAI0H,EAAUR,MAClB,OAAO7J,GAAKe,UAAUoH,WAAWzF,EAAEiC,KAAMjC,EAAEkC,MAAOjC,EAAEgC,KAAMhC,EAAEiC,SAGzD8E,GAKX,OAAO9J","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(treeData, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = treeData.root;\n      this.siblings = treeData.siblings;\n      this.parents = treeData.parents;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n      this.allNodes = this.allNodes.concat(this._flatten(this.parents));\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.zoom().scaleExtent([0.1, 10]).on('zoom', function () {\n          svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n        });\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        // Compute the layout.\n        this.tree = d3.tree().nodeSize([nodeSize[0] * 2, opts.callbacks.nodeHeightSeperation(nodeSize[0], nodeSize[1])]);\n\n        this.inverseTree = d3.tree().nodeSize([nodeSize[0] * 2, opts.callbacks.nodeHeightSeperation(nodeSize[0], nodeSize[1]) * -1]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.data.hidden || b.data.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this.inverseTree.separation(function separation(a, b) {\n          if (a.data.hidden || b.data.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update();\n      }\n    }, {\n      key: '_update',\n      value: function _update() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var rootNodes = this.tree(this.root);\n        var parentNodes = this.inverseTree(this.parents);\n\n        _.zip(rootNodes.children, parentNodes.children).forEach(function (i) {\n          if (!i[1].children) return;\n\n          i[0].children = i[0].children ? i[0].children.concat(i[1].children) : i[1].children;\n\n          if (i[1].children) {\n            i[1].children.forEach(function (j) {\n              j.parent = i[0];\n            });\n          }\n        });\n\n        var links = rootNodes.links();\n\n        // Create the link lines.\n        this.svg.selectAll('.link').data(links).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (l) {\n          return !l.target.data.noParent;\n        }).append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(rootNodes.descendants()).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', _.bind(this._siblingLine, this));\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').filter(function (d) {\n          return d.data.hidden ? false : true;\n        }).attr('x', function (d) {\n          return d.x - d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - d.cHeight / 2 + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          return opts.callbacks.nodeRenderer(d.data.name, d.x, d.y, nodeSize[0], nodeSize[1], d.data.extra, d.data.id, d.data['class'], d.data.textClass, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\n        }).on('contextmenu', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          d3.event.preventDefault();\n          opts.callbacks.nodeRightClick(d.data.name, d.data.extra, d.data.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.data.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.data.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.data.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n\n          var marriageId = start[0].data.marriageNode != null ? start[0].data.marriageNode.id : end[0].data.marriageNode.id;\n          var marriageNode = allNodes.find(function (n) {\n            return n.data.id == marriageId;\n          });\n          d.source.marriageNode = marriageNode;\n          d.target.marriageNode = marriageNode;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n        var nodeWidth = this.nodeSize[0];\n        var nodeHeight = this.nodeSize[1];\n\n        // Not first marriage\n        if (d.number > 0) {\n          ny -= nodeHeight * 8 / 10;\n        }\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeHeightSeperation',\n      value: function _nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n        return nodeMaxHeight + 25;\n      }\n    }, {\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          container.setAttribute('class', n.data['class']);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n          if (n.data.hidden) {\n            n.cWidth = 0;\n          } else {\n            n.cWidth = width;\n          }\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '2.2.1',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRightClick: function nodeRightClick(name, extra, id) {},\n          nodeHeightSeperation: function nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n            return TreeBuilder._nodeHeightSeperation(nodeWidth, nodeMaxHeight);\n          },\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          parents: [],\n          extra: person.extra,\n          isParent: !!person.isParent,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent,\n            isParent: node.isParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        if (person.parents) {\n\n          // reconstruct parents\n          var p1 = person.parents[0];\n          if (p1) p1.isParent = true;\n\n          var p2 = person.parents[1];\n          if (p2) p2.isParent = true;\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: false,\n            isParent: true,\n            children: [],\n            parents: [],\n            extra: null\n          };\n\n          if (p1) {\n            var p1result = reconstructTree(p1, node);\n          }\n\n          if (p1 && p2) {\n            node.parents.push(m);\n          }\n\n          if (p2) {\n            var p2result = reconstructTree(p2, node);\n            p2result.marriageNode = m;\n          }\n\n          if (p1 && p2) {\n\n            p1result.noParent = true;\n            p2result.noParent = true;\n            siblings.push({\n              source: {\n                id: p1result.id\n              },\n              target: {\n                id: p2result.id\n              },\n              number: 0\n            });\n          }\n        }\n\n        if (!node.isParent) parent.children.push(node);else parent.parents.push(node);\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function (marriage, index) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: marriage.extra\n          };\n\n          parent.children.push(m);\n\n          var sp = marriage.spouse;\n          var spouse = reconstructTree(sp, parent);\n          spouse.marriageNode = m;\n          spouse.noParent = true;\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n\n        if (parent == root) {\n          parent.parents = _.clone(parent.children);\n        }\n\n        return node;\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: d3.hierarchy(root, function (d) {\n          return d.children;\n        }),\n        parents: d3.hierarchy(root, function (d) {\n          return d.parents;\n        }),\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function _sortMarriages(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function (marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n});\n\n","(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n\ttypeof define === 'function' && define.amd ? define(factory) :\r\n\t(global.dTree = factory());\r\n}(this, (function () { 'use strict';\r\n\r\nclass TreeBuilder {\r\n\r\n  constructor(treeData, opts) {\r\n    TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\r\n\r\n    this.root = treeData.root;\r\n    this.siblings = treeData.siblings;\r\n    this.parents = treeData.parents;\r\n    this.opts = opts;\r\n\r\n    // flatten nodes\r\n    this.allNodes = this._flatten(this.root);\r\n    this.allNodes = this.allNodes.concat(this._flatten(this.parents));\r\n\r\n    // Calculate node size\r\n    let visibleNodes = _.filter(this.allNodes, function(n) {\r\n      return !n.hidden;\r\n    });\r\n    this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\r\n      opts.nodeWidth, opts.callbacks.textRenderer);\r\n  }\r\n\r\n  create() {\r\n\r\n    let opts = this.opts;\r\n    let allNodes = this.allNodes;\r\n    let nodeSize = this.nodeSize;\r\n\r\n    let width = opts.width + opts.margin.left + opts.margin.right;\r\n    let height = opts.height + opts.margin.top + opts.margin.bottom;\r\n\r\n    let zoom = d3.zoom()\r\n      .scaleExtent([0.1, 10])\r\n      .on('zoom', function() {\r\n        svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\r\n      });\r\n\r\n    //make an SVG\r\n    let svg = this.svg = d3.select(opts.target)\r\n      .append('svg')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .call(zoom)\r\n      .append('g')\r\n      .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\r\n\r\n    // Compute the layout.\r\n    this.tree = d3.tree()\r\n      .nodeSize([nodeSize[0] * 2,\r\n                 opts.callbacks.nodeHeightSeperation(nodeSize[0], nodeSize[1])]);\r\n\r\n    this.inverseTree = d3.tree()\r\n      .nodeSize([nodeSize[0] * 2,\r\n                opts.callbacks.nodeHeightSeperation(nodeSize[0], nodeSize[1]) * -1]);\r\n\r\n    this.tree.separation(function separation(a, b) {\r\n      if (a.data.hidden || b.data.hidden) {\r\n        return 0.3;\r\n      } else {\r\n        return 0.6;\r\n      }\r\n    });\r\n\r\n    this.inverseTree.separation(function separation(a, b) {\r\n      if (a.data.hidden || b.data.hidden) {\r\n        return 0.3;\r\n      } else {\r\n        return 0.6;\r\n      }\r\n    });\r\n\r\n    this._update();\r\n\r\n  }\r\n\r\n  _update() {\r\n\r\n    let opts = this.opts;\r\n    let allNodes = this.allNodes;\r\n    let nodeSize = this.nodeSize;\r\n\r\n    let rootNodes = this.tree(this.root);\r\n    let parentNodes = this.inverseTree(this.parents);\r\n\r\n    _.zip(rootNodes.children, parentNodes.children).forEach(function(i) {\r\n      if (!i[1].children) return;\r\n\r\n      i[0].children = i[0].children ? i[0].children.concat(i[1].children) : i[1].children;\r\n\r\n      if (i[1].children) {\r\n        i[1].children.forEach(function (j) {\r\n          j.parent = i[0];\r\n        });\r\n      }\r\n    });\r\n\r\n    let links = rootNodes.links();\r\n\r\n    // Create the link lines.\r\n    this.svg.selectAll('.link')\r\n      .data(links)\r\n      .enter()\r\n      // filter links with no parents to prevent empty nodes\r\n      .filter(function(l) {\r\n        return !l.target.data.noParent;\r\n      })\r\n      .append('path')\r\n      .attr('class', opts.styles.linage)\r\n      .attr('d', this._elbow);\r\n\r\n    let nodes = this.svg.selectAll('.node')\r\n      .data(rootNodes.descendants())\r\n      .enter();\r\n\r\n    this._linkSiblings();\r\n\r\n    // Draw siblings (marriage)\r\n    this.svg.selectAll('.sibling')\r\n      .data(this.siblings)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', opts.styles.marriage)\r\n      .attr('d', _.bind(this._siblingLine, this));\r\n\r\n    // Create the node rectangles.\r\n    nodes.append('foreignObject')\r\n      .filter(function(d) {\r\n        return d.data.hidden ? false : true;\r\n      })\r\n      .attr('x', function(d) {\r\n        return d.x - d.cWidth / 2 + 'px';\r\n      })\r\n      .attr('y', function(d) {\r\n        return d.y - d.cHeight / 2 + 'px';\r\n      })\r\n      .attr('width', function(d) {\r\n        return d.cWidth + 'px';\r\n      })\r\n      .attr('height', function(d) {\r\n        return d.cHeight + 'px';\r\n      })\r\n      .attr('id', function(d) {\r\n        return d.id;\r\n      })\r\n      .html(function(d) {\r\n        return opts.callbacks.nodeRenderer(\r\n          d.data.name,\r\n          d.x,\r\n          d.y,\r\n          nodeSize[0],\r\n          nodeSize[1],\r\n          d.data.extra,\r\n          d.data.id,\r\n          d.data.class,\r\n          d.data.textClass,\r\n          opts.callbacks.textRenderer);\r\n      })\r\n      .on('click', function(d)  {\r\n        if (d.data.hidden) {\r\n          return;\r\n        }\r\n        opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\r\n      })\r\n      .on('contextmenu', function(d)  {\r\n        if (d.data.hidden) {\r\n          return;\r\n        }\r\n        d3.event.preventDefault();\r\n        opts.callbacks.nodeRightClick(d.data.name, d.data.extra, d.data.id);\r\n      });\r\n  }\r\n\r\n  _flatten(root) {\r\n    let n = [];\r\n    let i = 0;\r\n\r\n    function recurse(node) {\r\n      if (node.children) {\r\n        node.children.forEach(recurse);\r\n      }\r\n      if (!node.id) {\r\n        node.id = ++i;\r\n      }\r\n      n.push(node);\r\n    }\r\n    recurse(root);\r\n    return n;\r\n  }\r\n\r\n  _elbow(d, i) {\r\n    if (d.target.data.noParent) {\r\n      return 'M0,0L0,0';\r\n    }\r\n    let ny = d.target.y + (d.source.y - d.target.y) * 0.50;\r\n\r\n    let linedata = [{\r\n      x: d.target.x,\r\n      y: d.target.y\r\n    }, {\r\n      x: d.target.x,\r\n      y: ny\r\n    }, {\r\n      x: d.source.x,\r\n      y: d.source.y\r\n    }];\r\n\r\n    let fun = d3.line().curve(d3.curveStepAfter)\r\n      .x(function(d) {\r\n        return d.x;\r\n      })\r\n      .y(function(d) {\r\n        return d.y;\r\n      });\r\n    return fun(linedata);\r\n  }\r\n\r\n  _linkSiblings() {\r\n\r\n    let allNodes = this.allNodes;\r\n\r\n    _.forEach(this.siblings, function(d) {\r\n      let start = allNodes.filter(function(v) {\r\n        return d.source.id == v.data.id;\r\n      });\r\n      let end = allNodes.filter(function(v) {\r\n        return d.target.id == v.data.id;\r\n      });\r\n      d.source.x = start[0].x;\r\n      d.source.y = start[0].y;\r\n      d.target.x = end[0].x;\r\n      d.target.y = end[0].y;\r\n\r\n      let marriageId = (start[0].data.marriageNode != null ?\r\n                        start[0].data.marriageNode.id :\r\n                        end[0].data.marriageNode.id);\r\n      let marriageNode = allNodes.find(function(n) {\r\n        return n.data.id == marriageId;\r\n      });\r\n      d.source.marriageNode = marriageNode;\r\n      d.target.marriageNode = marriageNode;\r\n    });\r\n\r\n  }\r\n\r\n  _siblingLine(d, i) {\r\n\r\n    let ny = d.target.y + (d.source.y - d.target.y) * 0.50;\r\n    let nodeWidth = this.nodeSize[0];\r\n    let nodeHeight = this.nodeSize[1];\r\n\r\n    // Not first marriage\r\n    if (d.number > 0) {\r\n      ny -= nodeHeight * 8 / 10;\r\n    }\r\n\r\n    let linedata = [{\r\n      x: d.source.x,\r\n      y: d.source.y\r\n    }, {\r\n      x: d.source.x + nodeWidth * 6 / 10,\r\n      y: d.source.y\r\n    }, {\r\n      x: d.source.x + nodeWidth * 6 / 10,\r\n      y: ny\r\n    }, {\r\n      x: d.target.marriageNode.x,\r\n      y: ny\r\n    }, {\r\n      x: d.target.marriageNode.x,\r\n      y: d.target.y\r\n    }, {\r\n      x: d.target.x,\r\n      y: d.target.y\r\n    }];\r\n\r\n    let fun = d3.line().curve(d3.curveStepAfter)\r\n      .x(function(d) {\r\n        return d.x;\r\n      })\r\n      .y(function(d) {\r\n        return d.y;\r\n      });\r\n    return fun(linedata);\r\n  }\r\n\r\n  static _nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\r\n    return nodeMaxHeight + 25;\r\n  }\r\n\r\n  static _nodeSize(nodes, width, textRenderer) {\r\n    let maxWidth = 0;\r\n    let maxHeight = 0;\r\n    let tmpSvg = document.createElement('svg');\r\n    document.body.appendChild(tmpSvg);\r\n\r\n    _.map(nodes, function(n) {\r\n      let container = document.createElement('div');\r\n      container.setAttribute('class', n.data.class);\r\n      container.style.visibility = 'hidden';\r\n      container.style.maxWidth = width + 'px';\r\n\r\n      let text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\r\n      container.innerHTML = text;\r\n\r\n      tmpSvg.appendChild(container);\r\n      let height = container.offsetHeight;\r\n      tmpSvg.removeChild(container);\r\n\r\n      maxHeight = Math.max(maxHeight, height);\r\n      n.cHeight = height;\r\n      if (n.data.hidden) {\r\n        n.cWidth = 0;\r\n      } else {\r\n        n.cWidth = width;\r\n      }\r\n    });\r\n    document.body.removeChild(tmpSvg);\r\n\r\n    return [width, maxHeight];\r\n  }\r\n\r\n  static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n    let node = '';\r\n    node += '<div ';\r\n    node += 'style=\"height:100%;width:100%;\" ';\r\n    node += 'class=\"' + nodeClass + '\" ';\r\n    node += 'id=\"node' + id + '\">\\n';\r\n    node += textRenderer(name, extra, textClass);\r\n    node += '</div>';\r\n    return node;\r\n  }\r\n\r\n  static _textRenderer(name, extra, textClass) {\r\n    let node = '';\r\n    node += '<p ';\r\n    node += 'align=\"center\" ';\r\n    node += 'class=\"' + textClass + '\">\\n';\r\n    node += name;\r\n    node += '</p>\\n';\r\n    return node;\r\n  }\r\n\r\n  static _debug(msg) {\r\n    if (TreeBuilder.DEBUG_LEVEL > 0)  {\r\n      console.log(msg);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst dTree = {\r\n\r\n  VERSION: '2.2.1',\r\n\r\n  init: function(data, options = {}) {\r\n\r\n    var opts = _.defaultsDeep(options || {}, {\r\n      target: '#graph',\r\n      debug: false,\r\n      width: 600,\r\n      height: 600,\r\n      callbacks: {\r\n        nodeClick: function(name, extra, id) {},\r\n        nodeRightClick: function(name, extra, id) {},\r\n        nodeHeightSeperation: function(nodeWidth, nodeMaxHeight) {\r\n          return TreeBuilder._nodeHeightSeperation(nodeWidth, nodeMaxHeight);\r\n        },\r\n        nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n          return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\r\n            id,nodeClass, textClass, textRenderer);\r\n        },\r\n        nodeSize: function(nodes, width, textRenderer) {\r\n          return TreeBuilder._nodeSize(nodes, width, textRenderer);\r\n        },\r\n        nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\r\n        textRenderer: function(name, extra, textClass) {\r\n          return TreeBuilder._textRenderer(name, extra, textClass);\r\n        },\r\n      },\r\n      margin: {\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0\r\n      },\r\n      nodeWidth: 100,\r\n      styles: {\r\n        node: 'node',\r\n        linage: 'linage',\r\n        marriage: 'marriage',\r\n        text: 'nodeText'\r\n      }\r\n    });\r\n\r\n    var data = this._preprocess(data, opts);\r\n    var treeBuilder = new TreeBuilder(data, opts);\r\n    treeBuilder.create();\r\n\r\n  },\r\n\r\n  _preprocess: function(data, opts) {\r\n\r\n    var siblings = [];\r\n    var id = 0;\r\n\r\n    var root = {\r\n      name: '',\r\n      id: id++,\r\n      hidden: true,\r\n      children: [],\r\n    };\r\n\r\n    var reconstructTree = function(person, parent) {\r\n\r\n      // convert to person to d3 node\r\n      var node = {\r\n        name: person.name,\r\n        id: id++,\r\n        hidden: false,\r\n        children: [],\r\n        parents: [],\r\n        extra: person.extra,\r\n        isParent: !!person.isParent,\r\n        textClass: person.textClass ? person.textClass : opts.styles.text,\r\n        class: person.class ? person.class : opts.styles.node\r\n      };\r\n\r\n      // hide linages to the hidden root node\r\n      if (parent == root) {\r\n        node.noParent = true;\r\n      }\r\n\r\n      // apply depth offset\r\n      for (var i = 0; i < person.depthOffset; i++) {\r\n        var pushNode = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: true,\r\n          children: [],\r\n          noParent: node.noParent,\r\n          isParent: node.isParent\r\n        };\r\n        parent.children.push(pushNode);\r\n        parent = pushNode;\r\n      }\r\n\r\n      // sort children\r\n      dTree._sortPersons(person.children, opts);\r\n\r\n      // add \"direct\" children\r\n      _.forEach(person.children, function(child) {\r\n        reconstructTree(child, node);\r\n      });\r\n\r\n      if (person.parents){\r\n\r\n        // reconstruct parents\r\n        var p1 = person.parents[0];\r\n        if (p1)\r\n          p1.isParent = true;\r\n\r\n        var p2 = person.parents[1];\r\n        if (p2)\r\n          p2.isParent = true;\r\n\r\n        var m = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: true,\r\n          noParent: false,\r\n          isParent: true,\r\n          children: [],\r\n          parents: [],\r\n          extra: null\r\n        };\r\n\r\n        if (p1) {\r\n          var p1result = reconstructTree(p1, node);\r\n        }\r\n\r\n        if (p1 && p2) {\r\n          node.parents.push(m);\r\n        }\r\n\r\n        if (p2){\r\n          var p2result = reconstructTree(p2, node);\r\n          p2result.marriageNode = m;\r\n        }\r\n\r\n        if (p1 && p2) {\r\n\r\n          p1result.noParent = true;\r\n          p2result.noParent = true;\r\n          siblings.push({\r\n            source: {\r\n              id: p1result.id\r\n            },\r\n            target: {\r\n              id: p2result.id\r\n            },\r\n            number: 0\r\n          });\r\n        }\r\n      }\r\n\r\n      if (!node.isParent)\r\n        parent.children.push(node);\r\n      else\r\n        parent.parents.push(node);\r\n\r\n      //sort marriages\r\n      dTree._sortMarriages(person.marriages, opts);\r\n\r\n      // go through marriage\r\n      _.forEach(person.marriages, function(marriage, index) {\r\n\r\n        var m = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: true,\r\n          noParent: true,\r\n          children: [],\r\n          extra: marriage.extra\r\n        };\r\n\r\n        parent.children.push(m);\r\n\r\n        var sp = marriage.spouse;\r\n        var spouse = reconstructTree(sp, parent);\r\n        spouse.marriageNode = m;\r\n        spouse.noParent = true;\r\n\r\n        dTree._sortPersons(marriage.children, opts);\r\n        _.forEach(marriage.children, function(child) {\r\n          reconstructTree(child, m);\r\n        });\r\n\r\n        siblings.push({\r\n          source: {\r\n            id: node.id\r\n          },\r\n          target: {\r\n            id: spouse.id\r\n          },\r\n          number: index\r\n        });\r\n      });\r\n\r\n      if (parent == root) {\r\n        parent.parents = _.clone(parent.children);\r\n      }\r\n\r\n      return node;\r\n    };\r\n\r\n    _.forEach(data, function(person) {\r\n      reconstructTree(person, root);\r\n    });\r\n\r\n    return {\r\n      root: d3.hierarchy(root, function(d) { return d.children }),\r\n      parents: d3.hierarchy(root, function(d) { return d.parents }),\r\n      siblings: siblings\r\n    };\r\n\r\n  },\r\n\r\n  _sortPersons: function(persons, opts) {\r\n    if (persons != undefined) {\r\n      persons.sort(function(a, b) {\r\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\r\n      });\r\n    }\r\n    return persons;\r\n  },\r\n\r\n  _sortMarriages: function(marriages, opts) {\r\n    if (marriages != undefined && Array.isArray(marriages)) {\r\n      marriages.sort(function(marriageA, marriageB) {\r\n        var a = marriageA.spouse;\r\n        var b = marriageB.spouse;\r\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\r\n      });\r\n    }\r\n    return marriages;\r\n  }\r\n\r\n};\r\n\r\nreturn dTree;\r\n\r\n})));\r\n"]}